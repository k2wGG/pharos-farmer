// src/ui.js

const chalk = require('chalk');
const inquirer = require('inquirer');
const fs = require('fs');

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
const divider = chalk.gray('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

// –ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å –∏–Ω—Ñ–æ–π
function showBanner() {
    console.clear();
    console.log(
        chalk.cyan.bold(`
 _   _           _  _____      
| \\ | |         | ||____ |     
|  \\| | ___   __| |    / /_ __ 
| . \` |/ _ \\ / _\` |    \\ \\ '__|
| |\\  | (_) | (_| |.___/ / |   
\\_| \\_/\\___/ \\__,_|\\____/|_|   

–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞—Ä–º–∏–Ω–≥–∞ Pharos Testnet
 @nod3r ‚Äî CLI-–≤–µ—Ä—Å–∏—è (open-source)
        `)
    );
    console.log(chalk.yellow('–í–ù–ò–ú–ê–ù–ò–ï! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ —Å –∞–∫—Ç–∏–≤–∞–º–∏!'));
    console.log(chalk.yellow('–í—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ —É –≤–∞—Å. –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏!'));
    console.log(divider);
}

// –ù–æ–≤—ã–π –±–ª–æ–∫: –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏ –û–î–ò–ù —Ä–∞–∑
function showWalletsAndProxies(wallets, proxies) {
    console.log(
        chalk.bold.cyan(
            `\nüëõ –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${wallets.length}   üåê –ü—Ä–æ–∫—Å–∏: ${proxies.length}\n`
        )
    );
    if (wallets.length > 0) {
        wallets.forEach((w, i) => {
            console.log(
                chalk.greenBright(`[${i + 1}] `) +
                chalk.whiteBright(w.address)
            );
        });
    } else {
        console.log(chalk.red('–ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!'));
    }
    console.log(divider + '\n');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings(config) {
    console.log(chalk.magenta.bold('\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:'));
    console.log(chalk.cyan(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ swap –∑–∞ —Ü–∏–∫–ª:         ${config.swapCount}`));
    console.log(chalk.cyan(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ PHRS:       ${config.transferCount}`));
    console.log(chalk.cyan(`  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–º–∏–Ω):    ${config.cooldownMinutes}`));
    console.log(chalk.cyan(`  –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π:    ${config.randomizeOrder ? '–í–ö–õ' : '–í–´–ö–õ'}`));
    console.log(divider);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é
async function changeSettings(config, saveConfig) {
    const answer = await inquirer.prompt([
        {
            type: 'input',
            name: 'swapCount',
            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ swap –∑–∞ —Ü–∏–∫–ª:',
            default: config.swapCount,
            validate: v => (!isNaN(Number(v)) && Number(v) > 0 ? true : '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0')
        },
        {
            type: 'input',
            name: 'transferCount',
            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ PHRS –∑–∞ —Ü–∏–∫–ª:',
            default: config.transferCount,
            validate: v => (!isNaN(Number(v)) && Number(v) > 0 ? true : '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0')
        },
        {
            type: 'input',
            name: 'cooldownMinutes',
            message: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–º–∏–Ω—É—Ç—ã):',
            default: config.cooldownMinutes,
            validate: v => (!isNaN(Number(v)) && Number(v) >= 0 ? true : '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ >= 0')
        },
        {
            type: 'confirm',
            name: 'randomizeOrder',
            message: '–í–∫–ª—é—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—è–¥–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π?',
            default: config.randomizeOrder
        }
    ]);
    const newConfig = {
        swapCount: Number(answer.swapCount),
        transferCount: Number(answer.transferCount),
        cooldownMinutes: Number(answer.cooldownMinutes),
        randomizeOrder: answer.randomizeOrder
    };
    saveConfig(newConfig);
    console.log(chalk.green('\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n'));
    showSettings(newConfig);
    return newConfig;
}

module.exports = {
    showBanner,
    showWalletsAndProxies, // <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ!
    showSettings,
    changeSettings
};
